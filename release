#!/usr/bin/env php
<?php
echo "Composer package release script\n";
echo " (c) 2012 Frank Kleine\n";
echo " This software is Drinkware. If you happen to meet the author spend him a drink.\n\n";
$pwd = getcwd();
if (false === $pwd) {
    error("Can't retrieve current directory - please check file permissions.");
    exit(1);
}

$output = execute('git status 2> /dev/null | tail -n1', 'Failure while checking git status', 2);
if ('nothing to commit (working directory clean)' !== $output[0]) {
    error("Can't create release, working directory not clean.\n");
    passthru('git status');
    exit(3);
}

if (!file_exists($pwd . DIRECTORY_SEPARATOR . 'composer.json')) {
    error("No composer.json found - are you sure this is a composer package?");
    exit(4);
}

$composerData = new ComposerData($pwd . DIRECTORY_SEPARATOR . 'composer.json');
if (!$composerData->hasVersion()) {
    error("No version found in composer.json. Can't create release without version.");
    exit(5);
}

echo "Current package version: " . $composerData->getVersion() . "\n";
echo "Please name the version to release (empty to keep current version): ";
$newVersion = trim(rtrim(fgets(STDIN), "\r\n"));
if (empty($newVersion)) {
    $newVersion = $composerData->getVersion();
    echo "Using current package version " . $newVersion . " for release\n";
} else {
    echo "Updating package version in composer.json to " . $newVersion . "\n";
    $composerData->updateVersion($newVersion);
    passthrough('git add composer.json', 6);
    passthrough('git commit -m "raise version for release"', 7);
    passthrough('git push origin master', 8);
}

passthrough('git tag -a v' . $newVersion . ' -m "tag release ' . $newVersion . '"', 9);
passthrough('git push --tags', 10);
echo "Successfully created release v" . $newVersion . "\n";
exit(0);

class ComposerData
{
    /**
     * path to composer file
     *
     * @type
     */
    private $composerFile;
    /**
     * raw composer json string
     *
     * @type  string
     */
    private $json;
    /**
     * package data
     *
     * @type  stdClass
     */
    private $data;

    /**
     * constructor
     *
     * @param  string  $composerFile  path to composer file
     */
    public function __construct($composerFile)
    {
        $this->composerFile = $composerFile;
        $this->json         = file_get_contents($this->composerFile);
        $this->data         = json_decode($this->json);
    }

    /**
     * checks if package has a version number
     *
     * @return  bool
     */
    public function hasVersion()
    {
        return isset($this->data->version);
    }

    /**
     * returns package version
     *
     * @return  string
     */
    public function getVersion()
    {
        return trim($this->data->version);
    }

    /**
     * updates package version
     *
     * @param  string  $newVersion
     */
    public function updateVersion($newVersion)
    {
        file_put_contents($this->composerFile, str_replace($this->data->version, $newVersion, $this->json));
    }
}

/**
 * calls passthru() and exits with given exit code if return code is not 0
 *
 * @param  string  $command
 * @param  int     $exitCode
 */
function passthrough($command, $exitCode)
{
    $return = 0;
    passthru($command, $return);
    if (0 !== $return) {
        exit($exitCode);
    }
}

/**
 * execute given command
 *
 * If the command fails it prints the given error message and calls exit() with
 * the given exit code.
 *
 * Returns the output of the command if successful.
 *
 * @param   string  $command
 * @param   string  $errorMsg
 * @param   int     $exitCode
 * @return  string[]
 */
function execute($command, $errorMsg, $exitCode)
{
    $output = array();
    $return = 0;
    exec($command, $output, $return);
    if (0 !== $return) {
        error($errorMsg . ": " . join("\n", $output));
        exit($exitCode);
    }

    return $output;
}

/**
 * prints out given error message
 *
 * @param  string  $message
 */
function error($message)
{
    echo 'ERROR: ' . $message . "\n";
}
?>